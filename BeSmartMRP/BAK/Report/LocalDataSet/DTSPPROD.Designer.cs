//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace mBudget.Report.LocalDataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DTSPPROD")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DTSPPROD : global::System.Data.DataSet {
        
        private XRPPRODDataTable tableXRPPROD;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DTSPPROD() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DTSPPROD(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["XRPPROD"] != null)) {
                    base.Tables.Add(new XRPPRODDataTable(ds.Tables["XRPPROD"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public XRPPRODDataTable XRPPROD {
            get {
                return this.tableXRPPROD;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DTSPPROD cln = ((DTSPPROD)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["XRPPROD"] != null)) {
                    base.Tables.Add(new XRPPRODDataTable(ds.Tables["XRPPROD"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableXRPPROD = ((XRPPRODDataTable)(base.Tables["XRPPROD"]));
            if ((initTable == true)) {
                if ((this.tableXRPPROD != null)) {
                    this.tableXRPPROD.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DTSPPROD";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DTSPPROD.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableXRPPROD = new XRPPRODDataTable();
            base.Tables.Add(this.tableXRPPROD);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeXRPPROD() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DTSPPROD ds = new DTSPPROD();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void XRPPRODRowChangeEventHandler(object sender, XRPPRODRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class XRPPRODDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncCode;
            
            private global::System.Data.DataColumn columncName;
            
            private global::System.Data.DataColumn columncName2;
            
            private global::System.Data.DataColumn columncSName;
            
            private global::System.Data.DataColumn columncQcPdGrp;
            
            private global::System.Data.DataColumn columncQnPdGrp;
            
            private global::System.Data.DataColumn columncQcPdType;
            
            private global::System.Data.DataColumn columncQnPdType;
            
            private global::System.Data.DataColumn columncQcUM;
            
            private global::System.Data.DataColumn columncQnUM;
            
            private global::System.Data.DataColumn columncVatIsOut;
            
            private global::System.Data.DataColumn columncCtrlStock;
            
            private global::System.Data.DataColumn columncQcAcChart;
            
            private global::System.Data.DataColumn columncQnAcChart;
            
            private global::System.Data.DataColumn columncQcAcChart2;
            
            private global::System.Data.DataColumn columncQnAcChart2;
            
            private global::System.Data.DataColumn columncRemark;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public XRPPRODDataTable() {
                this.TableName = "XRPPROD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal XRPPRODDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected XRPPRODDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cCodeColumn {
                get {
                    return this.columncCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cNameColumn {
                get {
                    return this.columncName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cName2Column {
                get {
                    return this.columncName2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cSNameColumn {
                get {
                    return this.columncSName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cQcPdGrpColumn {
                get {
                    return this.columncQcPdGrp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cQnPdGrpColumn {
                get {
                    return this.columncQnPdGrp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cQcPdTypeColumn {
                get {
                    return this.columncQcPdType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cQnPdTypeColumn {
                get {
                    return this.columncQnPdType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cQcUMColumn {
                get {
                    return this.columncQcUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cQnUMColumn {
                get {
                    return this.columncQnUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cVatIsOutColumn {
                get {
                    return this.columncVatIsOut;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cCtrlStockColumn {
                get {
                    return this.columncCtrlStock;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cQcAcChartColumn {
                get {
                    return this.columncQcAcChart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cQnAcChartColumn {
                get {
                    return this.columncQnAcChart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cQcAcChart2Column {
                get {
                    return this.columncQcAcChart2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cQnAcChart2Column {
                get {
                    return this.columncQnAcChart2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cRemarkColumn {
                get {
                    return this.columncRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public XRPPRODRow this[int index] {
                get {
                    return ((XRPPRODRow)(this.Rows[index]));
                }
            }
            
            public event XRPPRODRowChangeEventHandler XRPPRODRowChanging;
            
            public event XRPPRODRowChangeEventHandler XRPPRODRowChanged;
            
            public event XRPPRODRowChangeEventHandler XRPPRODRowDeleting;
            
            public event XRPPRODRowChangeEventHandler XRPPRODRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddXRPPRODRow(XRPPRODRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public XRPPRODRow AddXRPPRODRow(
                        string cCode, 
                        string cName, 
                        string cName2, 
                        string cSName, 
                        string cQcPdGrp, 
                        string cQnPdGrp, 
                        string cQcPdType, 
                        string cQnPdType, 
                        string cQcUM, 
                        string cQnUM, 
                        string cVatIsOut, 
                        string cCtrlStock, 
                        string cQcAcChart, 
                        string cQnAcChart, 
                        string cQcAcChart2, 
                        string cQnAcChart2, 
                        string cRemark) {
                XRPPRODRow rowXRPPRODRow = ((XRPPRODRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cCode,
                        cName,
                        cName2,
                        cSName,
                        cQcPdGrp,
                        cQnPdGrp,
                        cQcPdType,
                        cQnPdType,
                        cQcUM,
                        cQnUM,
                        cVatIsOut,
                        cCtrlStock,
                        cQcAcChart,
                        cQnAcChart,
                        cQcAcChart2,
                        cQnAcChart2,
                        cRemark};
                rowXRPPRODRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowXRPPRODRow);
                return rowXRPPRODRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                XRPPRODDataTable cln = ((XRPPRODDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new XRPPRODDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncCode = base.Columns["cCode"];
                this.columncName = base.Columns["cName"];
                this.columncName2 = base.Columns["cName2"];
                this.columncSName = base.Columns["cSName"];
                this.columncQcPdGrp = base.Columns["cQcPdGrp"];
                this.columncQnPdGrp = base.Columns["cQnPdGrp"];
                this.columncQcPdType = base.Columns["cQcPdType"];
                this.columncQnPdType = base.Columns["cQnPdType"];
                this.columncQcUM = base.Columns["cQcUM"];
                this.columncQnUM = base.Columns["cQnUM"];
                this.columncVatIsOut = base.Columns["cVatIsOut"];
                this.columncCtrlStock = base.Columns["cCtrlStock"];
                this.columncQcAcChart = base.Columns["cQcAcChart"];
                this.columncQnAcChart = base.Columns["cQnAcChart"];
                this.columncQcAcChart2 = base.Columns["cQcAcChart2"];
                this.columncQnAcChart2 = base.Columns["cQnAcChart2"];
                this.columncRemark = base.Columns["cRemark"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncCode = new global::System.Data.DataColumn("cCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncCode);
                this.columncName = new global::System.Data.DataColumn("cName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncName);
                this.columncName2 = new global::System.Data.DataColumn("cName2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncName2);
                this.columncSName = new global::System.Data.DataColumn("cSName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncSName);
                this.columncQcPdGrp = new global::System.Data.DataColumn("cQcPdGrp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncQcPdGrp);
                this.columncQnPdGrp = new global::System.Data.DataColumn("cQnPdGrp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncQnPdGrp);
                this.columncQcPdType = new global::System.Data.DataColumn("cQcPdType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncQcPdType);
                this.columncQnPdType = new global::System.Data.DataColumn("cQnPdType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncQnPdType);
                this.columncQcUM = new global::System.Data.DataColumn("cQcUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncQcUM);
                this.columncQnUM = new global::System.Data.DataColumn("cQnUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncQnUM);
                this.columncVatIsOut = new global::System.Data.DataColumn("cVatIsOut", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncVatIsOut);
                this.columncCtrlStock = new global::System.Data.DataColumn("cCtrlStock", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncCtrlStock);
                this.columncQcAcChart = new global::System.Data.DataColumn("cQcAcChart", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncQcAcChart);
                this.columncQnAcChart = new global::System.Data.DataColumn("cQnAcChart", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncQnAcChart);
                this.columncQcAcChart2 = new global::System.Data.DataColumn("cQcAcChart2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncQcAcChart2);
                this.columncQnAcChart2 = new global::System.Data.DataColumn("cQnAcChart2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncQnAcChart2);
                this.columncRemark = new global::System.Data.DataColumn("cRemark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncRemark);
                this.columncSName.Caption = "cCateg";
                this.columncQcPdGrp.Caption = "cGroup";
                this.columncQnPdGrp.Caption = "cQcAcChart";
                this.columncQcPdType.Caption = "cQnAcChart";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public XRPPRODRow NewXRPPRODRow() {
                return ((XRPPRODRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new XRPPRODRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(XRPPRODRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.XRPPRODRowChanged != null)) {
                    this.XRPPRODRowChanged(this, new XRPPRODRowChangeEvent(((XRPPRODRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.XRPPRODRowChanging != null)) {
                    this.XRPPRODRowChanging(this, new XRPPRODRowChangeEvent(((XRPPRODRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.XRPPRODRowDeleted != null)) {
                    this.XRPPRODRowDeleted(this, new XRPPRODRowChangeEvent(((XRPPRODRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.XRPPRODRowDeleting != null)) {
                    this.XRPPRODRowDeleting(this, new XRPPRODRowChangeEvent(((XRPPRODRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveXRPPRODRow(XRPPRODRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DTSPPROD ds = new DTSPPROD();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "XRPPRODDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class XRPPRODRow : global::System.Data.DataRow {
            
            private XRPPRODDataTable tableXRPPROD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal XRPPRODRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableXRPPROD = ((XRPPRODDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cCode {
                get {
                    try {
                        return ((string)(this[this.tableXRPPROD.cCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cCode\' in table \'XRPPROD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXRPPROD.cCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cName {
                get {
                    try {
                        return ((string)(this[this.tableXRPPROD.cNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cName\' in table \'XRPPROD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXRPPROD.cNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cName2 {
                get {
                    try {
                        return ((string)(this[this.tableXRPPROD.cName2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cName2\' in table \'XRPPROD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXRPPROD.cName2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cSName {
                get {
                    try {
                        return ((string)(this[this.tableXRPPROD.cSNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cSName\' in table \'XRPPROD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXRPPROD.cSNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cQcPdGrp {
                get {
                    try {
                        return ((string)(this[this.tableXRPPROD.cQcPdGrpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cQcPdGrp\' in table \'XRPPROD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXRPPROD.cQcPdGrpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cQnPdGrp {
                get {
                    try {
                        return ((string)(this[this.tableXRPPROD.cQnPdGrpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cQnPdGrp\' in table \'XRPPROD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXRPPROD.cQnPdGrpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cQcPdType {
                get {
                    try {
                        return ((string)(this[this.tableXRPPROD.cQcPdTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cQcPdType\' in table \'XRPPROD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXRPPROD.cQcPdTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cQnPdType {
                get {
                    try {
                        return ((string)(this[this.tableXRPPROD.cQnPdTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cQnPdType\' in table \'XRPPROD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXRPPROD.cQnPdTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cQcUM {
                get {
                    try {
                        return ((string)(this[this.tableXRPPROD.cQcUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cQcUM\' in table \'XRPPROD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXRPPROD.cQcUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cQnUM {
                get {
                    try {
                        return ((string)(this[this.tableXRPPROD.cQnUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cQnUM\' in table \'XRPPROD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXRPPROD.cQnUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cVatIsOut {
                get {
                    try {
                        return ((string)(this[this.tableXRPPROD.cVatIsOutColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cVatIsOut\' in table \'XRPPROD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXRPPROD.cVatIsOutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cCtrlStock {
                get {
                    try {
                        return ((string)(this[this.tableXRPPROD.cCtrlStockColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cCtrlStock\' in table \'XRPPROD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXRPPROD.cCtrlStockColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cQcAcChart {
                get {
                    try {
                        return ((string)(this[this.tableXRPPROD.cQcAcChartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cQcAcChart\' in table \'XRPPROD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXRPPROD.cQcAcChartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cQnAcChart {
                get {
                    try {
                        return ((string)(this[this.tableXRPPROD.cQnAcChartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cQnAcChart\' in table \'XRPPROD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXRPPROD.cQnAcChartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cQcAcChart2 {
                get {
                    try {
                        return ((string)(this[this.tableXRPPROD.cQcAcChart2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cQcAcChart2\' in table \'XRPPROD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXRPPROD.cQcAcChart2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cQnAcChart2 {
                get {
                    try {
                        return ((string)(this[this.tableXRPPROD.cQnAcChart2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cQnAcChart2\' in table \'XRPPROD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXRPPROD.cQnAcChart2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cRemark {
                get {
                    try {
                        return ((string)(this[this.tableXRPPROD.cRemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cRemark\' in table \'XRPPROD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXRPPROD.cRemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscCodeNull() {
                return this.IsNull(this.tableXRPPROD.cCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcCodeNull() {
                this[this.tableXRPPROD.cCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscNameNull() {
                return this.IsNull(this.tableXRPPROD.cNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcNameNull() {
                this[this.tableXRPPROD.cNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscName2Null() {
                return this.IsNull(this.tableXRPPROD.cName2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcName2Null() {
                this[this.tableXRPPROD.cName2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscSNameNull() {
                return this.IsNull(this.tableXRPPROD.cSNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcSNameNull() {
                this[this.tableXRPPROD.cSNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscQcPdGrpNull() {
                return this.IsNull(this.tableXRPPROD.cQcPdGrpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcQcPdGrpNull() {
                this[this.tableXRPPROD.cQcPdGrpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscQnPdGrpNull() {
                return this.IsNull(this.tableXRPPROD.cQnPdGrpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcQnPdGrpNull() {
                this[this.tableXRPPROD.cQnPdGrpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscQcPdTypeNull() {
                return this.IsNull(this.tableXRPPROD.cQcPdTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcQcPdTypeNull() {
                this[this.tableXRPPROD.cQcPdTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscQnPdTypeNull() {
                return this.IsNull(this.tableXRPPROD.cQnPdTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcQnPdTypeNull() {
                this[this.tableXRPPROD.cQnPdTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscQcUMNull() {
                return this.IsNull(this.tableXRPPROD.cQcUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcQcUMNull() {
                this[this.tableXRPPROD.cQcUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscQnUMNull() {
                return this.IsNull(this.tableXRPPROD.cQnUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcQnUMNull() {
                this[this.tableXRPPROD.cQnUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscVatIsOutNull() {
                return this.IsNull(this.tableXRPPROD.cVatIsOutColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcVatIsOutNull() {
                this[this.tableXRPPROD.cVatIsOutColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscCtrlStockNull() {
                return this.IsNull(this.tableXRPPROD.cCtrlStockColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcCtrlStockNull() {
                this[this.tableXRPPROD.cCtrlStockColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscQcAcChartNull() {
                return this.IsNull(this.tableXRPPROD.cQcAcChartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcQcAcChartNull() {
                this[this.tableXRPPROD.cQcAcChartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscQnAcChartNull() {
                return this.IsNull(this.tableXRPPROD.cQnAcChartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcQnAcChartNull() {
                this[this.tableXRPPROD.cQnAcChartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscQcAcChart2Null() {
                return this.IsNull(this.tableXRPPROD.cQcAcChart2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcQcAcChart2Null() {
                this[this.tableXRPPROD.cQcAcChart2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscQnAcChart2Null() {
                return this.IsNull(this.tableXRPPROD.cQnAcChart2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcQnAcChart2Null() {
                this[this.tableXRPPROD.cQnAcChart2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscRemarkNull() {
                return this.IsNull(this.tableXRPPROD.cRemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcRemarkNull() {
                this[this.tableXRPPROD.cRemarkColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class XRPPRODRowChangeEvent : global::System.EventArgs {
            
            private XRPPRODRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public XRPPRODRowChangeEvent(XRPPRODRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public XRPPRODRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591